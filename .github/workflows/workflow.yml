name: CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env: 
  AWS_ECR_FRONTEND: ${{ secrets.AWS_ECR_FRONTEND_REPOSITORY_NAME }} 
  AWS_ECR_BACKEND: ${{ secrets.AWS_ECR_BACKEND_REPOSITORY_NAME }}

jobs:    
#   build_and_push_frontend_image:
#     runs-on: self-hosted
#     steps:
#       - name: Checkout frontend_repository
#         uses: actions/checkout@v2
#         with:
#           repository: Authorita-h/frontend_intern_Maksim
#           token: ${{ secrets.GIT_TOKEN }} 
      
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Create frontend ECR repository
#         run: | 
#           echo "AWS_ECR_FRONTEND_REPOSITORY_URI=\
#           $(echo $(aws ecr create-repository \
#             --repository-name ${{ env.AWS_ECR_FRONTEND }} \
#             --region ${{ secrets.AWS_REGION }} \
#             --query 'repository.repositoryUri' || \
#           aws ecr describe-repositories \
#             --region ${{ env.AWS_REGION }} \
#             --repository-names ${{ env.AWS_ECR_FRONTEND }} \
#             --query 'repositories[0].repositoryUri'))" \
#           >> $GITHUB_ENV
          
#       - name: Check ... 
#         run: echo ${{ env.AWS_ECR_FRONTEND_REPOSITORY_URI }} 
      
#       - name: Build docker images
#         run: docker build --build-arg 'backend=http://${{ needs.create_lb.outputs.lb_dns }}:${{ secrets.BACKEND_PORT }}' -t ${{ env.AWS_ECR_FRONTEND_REPOSITORY_URI }} .
        
#       - name: Push repository
#         run: docker push ${{ env.AWS_ECR_FRONTEND_REPOSITORY_URI }}
      
#   build_and_push_backend_image:
#     runs-on: self-hosted
#     steps:
#       - name: Checkout frontend_repository
#         uses: actions/checkout@v2
#         with:
#           repository: Authorita-h/backend_intern_Maksim
#           token: ${{ secrets.GIT_TOKEN }} 
      
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Create backend ECR repository
#         run: | 
#           echo "AWS_ECR_BACKEND_REPOSITORY_URI=\
#           $(echo $(aws ecr create-repository \
#             --repository-name ${{ env.AWS_ECR_BACKEND }} \
#             --region ${{ secrets.AWS_REGION }} \
#             --query 'repository.repositoryUri' || \
#           aws ecr describe-repositories \
#             --region ${{ env.AWS_REGION }} \
#             --repository-names ${{ env.AWS_ECR_BACKEND }} \
#             --query 'repositories[0].repositoryUri'))" \
#           >> $GITHUB_ENV
          
#       - name: Check ... 
#         run: echo ${{ env.AWS_ECR_BACKEND_REPOSITORY_URI }} 
      
#       - name: Build docker images
#         run: docker build -t ${{ env.AWS_ECR_BACKEND_REPOSITORY_URI }} .
        
#       - name: Push repository
#         run: docker push ${{ env.AWS_ECR_BACKEND_REPOSITORY_URI }}
        
#   create_hosted_zone:
#     runs-on: self-hosted
#     env:
#       TF_VAR_site_domain: ${{ secrets.DOMAIN_NAME }}
# #     needs: [build_and_push_backend_image, build_and_push_frontend_image]
#     needs: [create_infrastructure]
#     defaults: 
#       run: 
#         working-directory: terraform/hosted_zone
#     steps:
#       - name: Checkout hosted_zone
#         uses: actions/checkout@v2
        
#       - name: Terraform initialization
#         run: terraform init 
        
#       - name: Run terraform
#         run: terraform destroy -auto-approve
     
  create_infrastructure:
    runs-on: self-hosted
    env:
      TF_VAR_DB_NAME: ${{ secrets.TF_VAR_DB_NAME }}
      TF_VAR_DB_PASSWORD: ${{ secrets.TF_VAR_DB_PASSWORD }} 
      TF_VAR_DB_USERNAME: ${{ secrets.TF_VAR_DB_USERNAME }} 
      TF_VAR_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      TF_VAR_GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      TF_VAR_site_domain: ${{ secrets.DOMAIN_NAME }}
      environment: ${GITHUB_REF##*/}
#     needs: [create_hosted_zone]
    needs: []
    defaults: 
      run: 
        working-directory: terraform
    steps:
#       - name: Checkout frontend_repository
#         uses: actions/checkout@v2
        
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1
        
#       - name: Create frontend ECR repository
#         run: | 
#           echo "AWS_ECR_FRONTEND_REPOSITORY_URI=\
#           $(echo $(aws ecr describe-repositories \
#               --region ${{ env.AWS_REGION }} \
#               --repository-names ${{ env.AWS_ECR_FRONTEND }} \
#               --query 'repositories[0].repositoryUri'))" \
#           >> $GITHUB_ENV
          
#       - name: Create backend ECR repository
#         run: | 
#           echo "AWS_ECR_BACKEND_REPOSITORY_URI=\
#           $(echo $(aws ecr describe-repositories \
#               --region ${{ env.AWS_REGION }} \
#               --repository-names ${{ env.AWS_ECR_BACKEND }} \
#               --query 'repositories[0].repositoryUri'))" \
#           >> $GITHUB_ENV
        
#       - name: Terraform initialization
#         run: terraform init 
        
      - name: Select workspace
        if: github.ref != 'refs/heads/main' 
        run: echo It's env.environment = ${{ env.environment }} also ${{ github.ref }} 
#           terraform workspace select ${GITHUB_REF##*/} || terraform workspace new ${GITHUB_REF##*/}
          
      
      - name: Select workspace
        if: github.ref != 'refs/heads/main'
        run: echo I'ts production
#           terraform workspace select prod || terraform workspace new prod
          
#       - name: Run terraform
#         run: terraform destroy -auto-approve -var='frontend_repository_url=${{ env.AWS_ECR_FRONTEND_REPOSITORY_URI }}' -var='backend_repository_url=${{ env.AWS_ECR_BACKEND_REPOSITORY_URI }}'
   
